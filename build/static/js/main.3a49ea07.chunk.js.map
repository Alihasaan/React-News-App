{"version":3,"sources":["app_components/weather.component.jsx","app_components/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","data","map","item","index","src","urlToImage","alt","title","description","href","url","target","Form","error","role","onSubmit","loadweather","id","type","name","autoComplete","placeholder","App","getNews","e","a","preventDefault","country","elements","value","countryCode","getCountryCode","fetch","api_call","json","response","console","log","articles","length","setState","countryCodeError","state","C","this","Alert","color","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"uTAuBeA,MArBf,SAAiBC,GACf,OACA,yBAAKC,UAAU,aACb,yBAAKA,UAAU,kBACbD,EAAME,KAAKC,KAAI,SAACC,EAAMC,GACtB,OACE,yBAAKJ,UAAU,QAEX,yBAAKA,UAAU,eAAeK,IAAKF,EAAKG,WAAYC,IAAI,mBACxD,yBAAKP,UAAU,aACZ,wBAAIA,UAAU,cAAcG,EAAKK,OACjC,uBAAGR,UAAU,aAAaG,EAAKM,aAC/B,uBAAGC,KAAMP,EAAKQ,IAAKC,OAAO,SAASZ,UAAU,mBAA7C,qB,MCmBAa,MA/BF,SAAAd,GACX,OACE,yBAAKC,UAAU,aACb,6BAAMD,EAAMe,MAuBd,yBAAKd,UAAU,0BAA0Be,KAAM,SAA/C,8CAvBgC,MAC9B,0BAAMC,SAAUjB,EAAMkB,aACpB,yBAAKjB,UAAU,OACb,yBAAKA,UAAU,YACb,2BACEkB,GAAK,KACLC,KAAK,OACLnB,UAAU,eACVoB,KAAK,UACLC,aAAa,MACbC,YAAY,aAGhB,yBAAKtB,UAAU,sCACb,4BAAQA,UAAU,mBAAlB,iB,gBC8DGuB,E,YAzEb,aAAe,IAAD,8BACZ,+CAgCJC,QAjCgB,uCAiCL,WAAMC,GAAN,qBAAAC,EAAA,yDACTD,EAAEE,iBACIC,EAAUH,EAAEb,OAAOiB,SAASD,QAAQE,MACpCC,EAAY,EAAKC,eAAeJ,IACnCA,EAJM,iCAKgBK,MAAO,+CAA+CF,EAAY,4CALlF,cAKDG,EALC,gBAMgBA,EAASC,OANzB,OAMDC,EANC,OAOPC,QAAQC,IAAIF,GACoB,IAA7BA,EAASG,SAASC,QACnBH,QAAQC,IAAI,uBACZ,EAAKG,SAAS,CAACC,kBAAmB,KAElC,EAAKD,SAAS,CAACC,kBAAmB,IAEpC,EAAKD,SAAS,CACZF,SAAWH,EAASG,SACpBzB,OAAQ,IAhBH,wBAoBT,EAAK2B,SAAS,CAAC3B,OAAQ,IApBd,4CAjCK,sDAEZ,EAAK6B,MAAQ,CACZJ,SAAU,GACVzB,OAAQ,EACR4B,kBAAkB,GALP,E,4EAQDE,GACb,QAAQ,GACN,IAAW,UAALA,GAAqB,UAAJA,GAAmB,UAAJA,EACpC,MAAO,KAET,IAAU,OAALA,GAAkB,OAAJA,GAAiB,WAAJA,GAAqB,MAAJA,GAAgB,MAAJA,EAC3D,MAAO,KAET,IAAW,UAALA,GAAqB,UAAJA,GAAmB,UAAJA,EACpC,MAAO,KAET,IAAW,WAALA,GAAsB,WAAJA,GAAqB,WAALA,EAGxC,IAAW,UAALA,GAAqB,UAAJA,GAAoB,UAALA,EACpC,MAAO,KAET,IAAW,UAALA,GAAqB,UAAJA,GAAoB,UAALA,EACpC,MAAO,KAET,QAEA,OAAOA,K,+BA2BP,OACE,yBAAK5C,UAAY,QACgB,IAA9B6C,KAAKF,MAAMD,iBAA0B,kBAACI,EAAA,EAAD,CAAOC,MAAM,UAAb,qCACJ,uBAAGrC,KAAK,8BAA8BE,OAAQ,QAAQZ,UAAU,cAAhE,cADI,+BAE1B,KAEZ,kBAAC,EAAD,CACEiB,YAAe4B,KAAKrB,QACpBV,MAAS+B,KAAKF,MAAM7B,QACtB,kBAAC,EAAD,CACEb,KAAO4C,KAAKF,MAAMJ,gB,GApEVS,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnD,GACLuB,QAAQvB,MAAMA,EAAMoD,a","file":"static/js/main.3a49ea07.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./form.style.css\";\r\nfunction Weather(props) {\r\n  return (\r\n  <div className=\"container\">\r\n    <div className=\"grid-container\">\r\n     {props.data.map((item ,index) =>{\r\n      return(\r\n        <div className=\"card\">\r\n          \r\n            <img className=\"card-img-top\" src={item.urlToImage} alt=\"Card image cap\"></img>\r\n            <div className=\"card-body\">\r\n               <h5 className=\"card-title\">{item.title}</h5>\r\n               <p className=\"card-text\">{item.description}</p>\r\n               <a href={item.url} target=\"_blank\" className=\"btn btn-primary\">Read More</a>\r\n            </div>   \r\n        </div>\r\n      )\r\n    })}\r\n    </div>\r\n  </div>\r\n  );\r\n}\r\nexport default Weather;\r\n","import React from \"react\";\r\nimport \"./form.style.css\";\r\nconst Form = props => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div>{props.error ? error() : null}</div>\r\n      <form onSubmit={props.loadweather}>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-3\">\r\n            <input\r\n              id = \"01\"\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"country\"\r\n              autoComplete=\"off\"\r\n              placeholder=\"Country\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3 mt-md-0 my-2 text-md-left\">\r\n            <button className=\"btn btn-primary\">Get News</button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nfunction error(){\r\n  return(\r\n    <div className=\"alert alert-danger mx-5\" role =\"alert\">\r\n      Please enter Country Name or Country Code.\r\n    </div>\r\n  )\r\n}\r\nexport default Form;\r\n","import React from \"react\";\nimport Weather from \"./app_components/weather.component.jsx\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Form from \"./app_components/form.component\";\nimport \"./App.css\";\nimport { Alert } from 'reactstrap';\nconst API_key = \"e4d4431929f441568bdcc6cc7b55f8cc\";\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n     articles: []   ,\n     error : false,\n     countryCodeError: false\n    };\n}\ngetCountryCode(C){\n  switch (true) {\n    case  C == \"canada\" || C ==\"Canada\"|| C ==\"CANADA\"  :\n      return \"ca\";\n      break;\n    case C == \"usa\" || C ==\"USA\" || C ==\"America\" || C ==\"US\" || C ==\"us\": \n      return \"us\"\n      break;\n    case  C == \"france\" || C ==\"France\"|| C ==\"FRANCE\"  :\n      return \"fr\";\n      break;\n    case  C == \"germany\" || C ==\"Germany\"|| C == \"GERMANY\"  :\n      return \"de\";\n      break;\n    case  C == \"russia\" || C ==\"Russia\"|| C == \"RUSSIA\"  :\n      return \"de\";\n      break;  \n    case  C == \"turkey\" || C ==\"Turkey\"|| C == \"TURKEY\"  :\n      return \"tr\";\n      break;   \n    default :\n\n    return C  \n  }\n}\ngetNews  = async(e) => {\n  e.preventDefault();\n  const country = e.target.elements.country.value; \n  const countryCode=this.getCountryCode(country);\n  if(country){\n    const api_call = await fetch( \"http://newsapi.org/v2/top-headlines?country=\"+countryCode+\"&apiKey=\"+  API_key);\n    const response = await api_call.json();\n    console.log(response);\n    if(response.articles.length === 0){\n      console.log(\"Worng Country Code.\")\n      this.setState({countryCodeError : true})\n    }else{\n      this.setState({countryCodeError : false})\n    }\n    this.setState({\n      articles : response.articles,\n      error : false\n    });\n}\nelse{\n  this.setState({error : true})\n}\n}\n  render() {\n    return (\n      <div className = \"App\">\n        {this.state.countryCodeError===true ? <Alert color=\"danger\">\n        Please enter a valid Country code <a href=\"https://newsapi.org/sources\" target =\"blank\" className=\"alert-link\">Click here</a>.To find your Country code.\n         </Alert> : null}\n        \n        <Form \n          loadweather = {this.getNews} \n          error = {this.state.error}/>\n        <Weather\n          data ={this.state.articles}\n       />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}